// Mocks generated by Mockito 5.4.4 from annotations
// in stock_scan_parser/test/cubit/stock_scan_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stock_scan_parser/network/endpoints/stock_scan_api.dart' as _i2;
import 'package:stock_scan_parser/network/models/stock_scan_resp.dart' as _i5;
import 'package:stock_scan_parser/repository/stock_scan_repo.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStockScanApi_0 extends _i1.SmartFake implements _i2.StockScanApi {
  _FakeStockScanApi_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StockScanRepoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockScanRepoImpl extends _i1.Mock implements _i3.StockScanRepoImpl {
  @override
  _i2.StockScanApi get stockScanApi => (super.noSuchMethod(
        Invocation.getter(#stockScanApi),
        returnValue: _FakeStockScanApi_0(
          this,
          Invocation.getter(#stockScanApi),
        ),
        returnValueForMissingStub: _FakeStockScanApi_0(
          this,
          Invocation.getter(#stockScanApi),
        ),
      ) as _i2.StockScanApi);

  @override
  _i4.Future<List<_i5.StockScan>> getStockScanData() => (super.noSuchMethod(
        Invocation.method(
          #getStockScanData,
          [],
        ),
        returnValue: _i4.Future<List<_i5.StockScan>>.value(<_i5.StockScan>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.StockScan>>.value(<_i5.StockScan>[]),
      ) as _i4.Future<List<_i5.StockScan>>);
}
